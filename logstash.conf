input {
  tcp {
    port => 5044
    codec => "json"  # JSON 데이터를 처리하기 위해 codec 설정
  }
}

filter {
  # Grok으로 message 필드 파싱
  grok {
    match => {
      "message" => '%{IPORHOST:clientip} - %{DATA:ident} \[%{HTTPDATE:timestamp}\] "%{WORD:request_method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:response} (?:%{NUMBER:bytes}|-) "(?:%{DATA:referrer}|-)" "(?:%{DATA:user_agent}|-)"'
    }
    overwrite => [ "message" ]
  }

  # 시간 필드 파싱
  date {
    match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
    target => "@timestamp"
    remove_field => ["timestamp"]
  }

  # WebShell 탐지 로직
  if [request] =~ /(eval\(|assert\(|cmd=|exec=|passthru=|shell=|base64_decode\()/ {
    mutate {
      add_tag => ["possible_webshell"]
      add_field => {
        "attack_detected" => "webshell_param"
        "attack_type" => "webshell"
        "command" => "Detected"
      }
    }
  }

  if [request_method] == "POST" and [request] =~ /\.(php|asp|jsp|sh|pl|py)$/ {
    mutate {
      add_tag => ["possible_webshell_upload"]
      add_field => {
        "attack_detected" => "webshell_upload"
        "attack_type" => "webshell"
      }
    }
  }

  if [request] =~ /\?cmd=/ {
    mutate {
      add_tag => ["webshell_command_execution"]
      add_field => {
        "attack_detected" => "webshell_command"
        "attack_type" => "webshell"
        "command" => "%{[request]}"
      }
    }
  }

  if [user_agent] =~ /(curl|wget|python-requests|nmap|dirbuster)/ {
    mutate {
      add_tag => ["suspicious_user_agent"]
      add_field => {
        "attack_detected" => "suspicious_user_agent"
        "attack_type" => "webshell"
      }
    }
  }

  # 의심스러운 응답 코드 탐지
  if [response] in ["403", "500"] {
    mutate {
      add_tag => ["suspicious_response"]
      add_field => {
        "attack_detected" => "response_issue"
        "response_status" => "%{[response]}"
      }
    }
  }

  # 요청 크기 확인
  if [bytes] and [bytes] < 500 {
    mutate {
      add_tag => ["small_request"]
      add_field => {
        "request_size" => "%{[bytes]}"
      }
    }
  }

  # 추가 필드 정리
  mutate {
    remove_field => ["ident"]
  }
}

output {
  elasticsearch {
    hosts => ["https://localhost:9200"]
    index => "nginx-logs-test-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "H4J4mxUZr5vXjS=LLMzO"
    ssl => true
    cacert => "/etc/logstash/certs/http_ca.crt"
  }

  stdout {
    codec => rubydebug  # 디버깅을 위해 구조화된 JSON 출력
  }
}
